indeces
minimum
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
best("AK", "outcome")
state<-"AK"
dat<-read.csv("C:\\Users\\Galina\\Downloads\\DataScience\\outcome-of-care-measures.csv",colClasses = "character")
#check that states are valid
#return hospital name in that state with the lowest 30-day
#create a subset with only the numbers from that state
statedata<-dat[which(dat$State==state),]
minimum<-min(as.numeric(statedata$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia), na.rm=TRUE)
sortBy<-"Hospital.Name"
statedata_2<-arrange_(statedata, .dots = sortBy)
indeces<-minimum==statedata_2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
head(statedata_2)
indeces
which(indeces)
a<-c(TRUE, FALSE, TRUE, TRUE, FALSE)
which(a)
which(a)[1]
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
best("AK", "Pneu")
indeces
statedata_2[which(indeces)[1]]
which(indeces)
which(indeces)[1]
statedata_2[,which(indeces)[1]]
statedata_2[which(indeces)[1],]
statedata_2$Hospital.Name[which(indeces)[1],]
answer<-statedata_2[which(indeces)[1],]
answer$Hospital.Name
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
best("AK", "pneu")
value<<-Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia
value<-"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
statedata_2$value
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
best("AK", "Failure")
sortBy
sortBy<-c("Hospital.Name", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
statedata_2<-arrange_(statedata, .dots = sortBy)
head(statedata_2)
source('C:/Users/Galina/Downloads/DataScience/rankhospital.R')
source('C:/Users/Galina/Downloads/DataScience/rankhospital.R')
rankhospital("AK", "Pneumonia", 4)
source('C:/Users/Galina/Downloads/DataScience/rankhospital.R')
rankhospital("AK", "Pneumonia", 4)
rankhospital("AK", "Pneumonia", 20)
source('C:/Users/Galina/Downloads/DataScience/rankhospital.R')
rankhospital("AK", "Pneumonia",4)
rankhospital("AK", "Pneumoni",4)
rankhospital("AK", "Failure",4)
source('C:/Users/Galina/Downloads/DataScience/rankhospital.R')
rankhospital("TX", "Failure", 4)
rankhospital("MD", "heart attack", "worst")
best("TX", "heart attack")
best("TX", "Failure")
View(dat)
statedata<-dat[which(dat$State==state),]
minimum<-min(as.numeric(statedata[,value]), na.rm=TRUE)
sortBy<-"Hospital.Name"
statedata_2<-arrange_(statedata, .dots = sortBy)
indeces<-minimum==statedata_2[,value]
answer<-statedata_2[which(indeces)[1],]
answer
state
state<-"TX"
statedata<-dat[which(dat$State==state),]
minimum<-min(as.numeric(statedata[,value]), na.rm=TRUE)
sortBy<-"Hospital.Name"
statedata_2<-arrange_(statedata, .dots = sortBy)
indeces<-minimum==statedata_2[,value]
answer<-statedata_2[which(indeces)[1],]
answer$Hospital.Name
source('C:/Users/Galina/Downloads/DataScience/Best2.R')
best("TX", "Heart")
dat<-read.csv("C:\\Users\\Galina\\Downloads\\DataScience\\outcome-of-care-measures.csv",colClasses = "character")
statedata<-dat[which(dat$State==state),]
minimum<-min(as.numeric(statedata[,value]), na.rm=TRUE)
sortBy<-"Hospital.Name"
statedata_2<-arrange_(statedata, .dots = sortBy)
indeces<-minimum==statedata_2[,11]
indeces
answer<-statedata_2[which(indeces)[1],]
answer$Hospital.Name
answer$Address.1
indeces==TRUE
minimum
state<-"TX"
statedata<-dat[which(dat$State==state),]
s<-statedata$State
head(s)
minimum<-min(as.numeric(statedata[,value]), na.rm=TRUE)
sortBy<-"Hospital.Name"
statedata_2<-arrange_(statedata, .dots = sortBy)
indeces<-minimum==statedata_2[,value]
indeces
results<-c(dat$Hospital.Name,dat$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
View(statedata)
results<-data.frame("name"=dat$Hospital.Name,)
results<-data.frame("name"=dat$Hospital.Name, "state"=dat$State,"attack"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,"failure"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, "pneu"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
View(results)
class(dat$State)
class(results$state)
results<-data.frame("name"=dat$Hospital.Name, "state"=dat$State ,"attack"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,"failure"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure, "pneu"=dat$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, stringsAsFactors = FALSE)
View(results)
class(results$state)
keep<-c("State","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
results<-dat[keep]
View(results)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cranM-tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
View(cran)
filter(cran, country=="IN"|country=="US")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, decs(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20, size_gb = size_mb /2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb /2^10)
mutate(cran, correct_size=size*1000)
mutate(cran, correct_size=size+1000)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
install.packages("RMySQL")
library(RMySQL)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
swirl()
library(swirl)
rm(list=ls())
swirl()
mydf=read.csv(path2csv, stringsAsFactors = FALSE)
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<-"3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(ip_id, package, size)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
rm(list=ls())
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
submit()
pack_sum<
;
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count)
View(students)
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col=sex_class, into = c("sex", "class"))
submit()
students3
submit()
?gather
reset()
reset()
swirl()
submit()
?spread
submit()
View(students3)
submit
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
help()
help?
;
submit()
reset()
swirl()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
submit()
submit()
submit()
submit()
passed <- passed %>% mutate(status = "passed")
failed<-failed %>% mutate(status="failed")
bind_rows(passed, failed)
sat
View(sat)
submit()
submit()
submit()
library(reshape2)
head(mtcars)
rm(list=ls())
source('C:/Users/Galina/Downloads/DataScience/ReshapingData.R')
source('C:/Users/Galina/Downloads/DataScience/ReshapingData.R')
cylData<-dcast(carMelt, cyl~variable) #defaults to length in case of missing aggregation function
cylData
cyldata2<-dcast(carMelt, cyl~variable, mean)
cyldata2
library(plyr)
ddply(InsectSprays,.(spray), summarize, sum=sum(count))
d1<-date()
d2<-Sys.Date()
d1
d2
format(d2, "%a, %b, %d")
x<-c("1jan1960", "2jan 1734", "3jan1934")
z<-as.Date(x, "%d,%b,%Y")
z
<-c("1jan1960", "2jan1950", "3jan1934")
z<-as.Date(x, "%d%b%Y")
x<-c("1jan1960", "2jan1950", "3jan1934")
z<-as.Date(x, "%d%b%Y")
z
z[1]-z[2]
weekdays(d2)
months(d2)
julian(d2)
library(lubridate)
ymd("19580125")
ymd_hms("2011-05-06 10:25:02")
Sys.timezone()
Sys.timezone(location=FALSE)
rm(list=ls())
pathXtest <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\test"
xtest<-read.table(pathXtest)
pathXtest <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\test\\X_test.txt"
xtest<-read.table(pathXtest)
pathYtest <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\test\\y_test.txt"
ytest<-read.table(pathYtest)
class(ytest)
pathSubtest <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\test\\subject_test.txt"
subtest<-read.table(pathSubtest)
pathXtrain <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\train\\X_train.txt"
xtrain<-read.table(pathXtrain)
pathYtrain <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\train\\y_train.txt"
ytrain<-read.table(pathYtrain)
pathSubtrain <- "C:\\Users\\Galina\\Downloads\\DataScience\\Data2\\train\\subject_train.txt"
subtrain<-read.table(pathSubtrain)
results<-rbind.data.frame(xtest,xtrain)
View(ytest)
resultsY<-rbind(ytest,ytrain)
resultssub<-rbind(subtest,subtrain)
View(results)
results$y<-resultsY
results$sub<-resultssub
View(results)
identifierTest<-rep("test",2947)
identifierTrain<-rep("train",7352)
resultsId<-rbind(identifierTest,identifierTrain)
results$identifier[1:2947,]<-"test"
View(resultsId)
originallengthTest<-length(identifierTest)
for(i in 1:length(identifierTrain)) {
identifierTest[originallengthTest+i]<-identifierTrain[i]
}
results$identifier<-identifierTest
View(resultsY)
View(results)
class(results[1,1])
for(j in 1:10299) {
extractions$mean[j]<-mean(results[1,1:561])
}
temp<-results[1,1:561]
View(temp)
class(temp)
extractions<-data.frame(stringsAsFactors = FALSE)
extractions$mean<-mean(temp[1,])
tempmean<-rowMeans(temp[1,])
class(tempmean)
extractions[1,1]<-tempmean
extractions[1,2]<-tempmean
extractions[1,2]<-sd(temp[1,])
View(extractions)
for(j in 1:10299) {
temp<-results[j,1:561]
extractions[j,1]<-rowMeans(temp[1,])
extractions[j,2]<-sd(temp[1,])
}
View(extractions)
resultsY$V1[cat==1]<-"Walking"
resultsY$V1[V1==1]<-"Walking"
resultsY$V1[resultsY$V1==1]<-"Walking"
View(resultsY)
resultsY$V1[resultsY$V1==2]<-"Walking Upstairs"
resultsY$V1[resultsY$V1==3]<-"Walking Downstairs"
resultsY$V1[resultsY$V1==4]<-"Sitting"
resultsY$V1[resultsY$V1==5]<-"Standing"
resultsY$V1[resultsY$V1==6]<-"Laying"
colnames(resultsY)[1]<-"Activities"
colnames(extractactions)[1]<-"Means"
colnames(extractions)[1]<-"Means"
colnames(extractions)[2]<-"Standart_Deviations"
resultsalmost<-extractions
resultsalmost$Activities<-resultsY
resultsalmost$Subject<-resultssub
library(dplyr)
final<-tbl_df(data = resultsalmost)
class(resultsalmost)
class(resultsalmost$Activities)
View(resultsalmost)
resultsalmost$Activities<-resultsY$Activities
resultsalmost$Subject<-resultssub$V1
class(resultsalmost$Activities)
final<-tbl_df(data = resultsalmost)
summarise(final)
View(final)
summarise(final)
library(plyr)
final<-xtabs(formula = mean, data=resultsalmost)
View(resultsalmost)
final<-xtabs(mean ~ Activities + Subject, data=resultsalmost,)
final<-xtabs(resultsalmost$Means+resultsalmost$Standart_Deviations ~ resultsalmost$Activities + resultsalmost$Subject, data=resultsalmost,)
final
final<-xtabs(resultsalmost$Means+resultsalmost$Standart_Deviations ~ resultsalmost$Activities + resultsalmost$Subject, data=resultsalmost,formula = mean)
resultsalmost %>%
group_by(Activities,Subject) %>%
summarise_each(funs(mean())) %>%
final
rm(list=ls())
swirl()
library(swirl)
swirl()
?read.csv
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version =="3.1.1", country=="US")
?Comparison
filter(cran, r_version <="3.0.2", country=="IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os=="linux-gru")
filter(cran, size > 100500 & r_os=="linux-gru")
filter(cran, size > 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
is.na
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
quit()
source('C:/Users/Galina/Downloads/DataScience/Wearable_Tech_Getting_Cleaning/run_analysis.R')
setwd("C:/Users/Galina/Downloads/DataScience/Wearable_Tech_Getting_Cleaning")
source('C:/Users/Galina/Downloads/DataScience/Wearable_Tech_Getting_Cleaning/run_analysis.R')
write.table(final, "cleanData.txt", sep = "\t")
Xtabs<-read.table("cleanData.txt", sep="\t")
head(Xtabs)
final
View(resultsalmost)
View(resultsalmost)
rm("result")
rm(list=ls())
source('C:/Users/Galina/Downloads/DataScience/Wearable_Tech_Getting_Cleaning/run_analysis.R')
final<-ddply(extractions, ~Activities +Subject, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
colnames(extractions)
final<-ddply(extractions, Means+Standart_Deviations~Activities +Subject, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
final<-ddply(extractions, extractions$Means+extractions$Standart_Deviations~extractions$Activities +extractions$Subject, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
final<-ddply(extractions, extractions$Means+extractions$Standart_Deviations~extractions$Activities +extractions$Subject, summarise,extractions$Means=mean(Means), extractions$Standart_Deviations=mean(Standart_Deviations))
final<-ddply(extractions, extractions$Means+extractions$Standart_Deviations~extractions$Activities +extractions$Subject, summarise)
final<-ddply(extractions, extractions$Means+extractions$Standart_Deviations~extractions$Activities +extractions$Subject, summarise,extractions$Means=mean(Means), extractions$Standart_Deviations=mean(Standart_Deviations))
final<-ddply(extractions, extractions$Means+extractions$Standart_Deviations~extractions$Activities +extractions$Subject, summarise,Means=mean(Means), Deviations=mean(Standart_Deviations))
class(resultsY$V1)
class(extractions$Activities)
extractions$Activities<-resultsY$V1
final<-ddply(extractions, ~Activities +Subject, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
colnames(final)
final<-ddply(extractions, Activities +Subject~, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
final<-ddply(extractions, Activities +Subject, summarise,mean=mean(Means), sd=mean(Standart_Deviations))
head(final)
write.table(final, "cleanData.txt", sep = "\t")
rm(list=ls())
source('C:/Users/Galina/Downloads/DataScience/Wearable_Tech_Getting_Cleaning/run_analysis.R')
